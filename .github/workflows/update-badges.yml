name: Update Vercel Badge

on: deployment_status

jobs:
  update-badge:
    # Add additional checks to prevent recursive updates
    if: |
      github.event.deployment_status.state == 'success' && 
      !contains(github.event.deployment.ref, 'Update Vercel preview badge URL') &&
      !contains(github.event.deployment_status.description, 'Preview badge update') &&
      github.event.deployment.environment == 'Preview'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Get Vercel Preview URL
        id: get-preview-url
        run: |
          PREVIEW_URL="${{ github.event.deployment_status.target_url }}"
          echo "preview_url=$PREVIEW_URL" >> $GITHUB_OUTPUT

      - name: Update README with new URL
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const readmePath = path.join(process.env.GITHUB_WORKSPACE, 'README.md');
            let content = fs.readFileSync(readmePath, 'utf8');

            // Match the Vercel Preview badge by its alt text and capture everything up to the closing parenthesis
            const badgeRegex = /\[!\[Vercel Preview\].*?\]\(.*?\)/;
            const newBadge = `[![Vercel Preview](https://img.shields.io/github/deployments/gearsandcode/cartales-ai/Preview?label=vercel%20preview&logo=vercel&logoColor=white)](${process.env.PREVIEW_URL})`;

            // Check if the badge actually needs updating
            const currentBadge = content.match(badgeRegex)?.[0];
            if (!currentBadge || currentBadge !== newBadge) {
              const newContent = content.replace(badgeRegex, newBadge);

              try {
                const { data: refs } = await github.rest.git.listMatchingRefs({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'heads/'
                });
                
                const sha = context.payload.deployment.sha;
                for (const ref of refs) {
                  const { data: commit } = await github.rest.git.getCommit({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    commit_sha: ref.object.sha
                  });
                  
                  if (commit.sha === sha) {
                    const branch = ref.ref.replace('refs/heads/', '');
                    
                    const { data: file } = await github.rest.repos.getContent({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      path: 'README.md',
                      ref: branch
                    });
                    
                    await github.rest.repos.createOrUpdateFileContents({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      path: 'README.md',
                      message: 'Update Vercel preview badge URL [skip ci] [skip actions]',
                      content: Buffer.from(newContent).toString('base64'),
                      sha: file.sha,
                      branch: branch,
                      committer: {
                        name: 'github-actions[bot]',
                        email: 'github-actions[bot]@users.noreply.github.com'
                      }
                    });
                    break;
                  }
                }
              } catch (error) {
                console.error('Error updating file:', error);
                process.exit(1);
              }
            } else {
              console.log('Badge is already up to date, skipping update');
            }
        env:
          PREVIEW_URL: ${{ steps.get-preview-url.outputs.preview_url }}
