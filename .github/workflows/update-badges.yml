name: Update Vercel Badge

on: deployment_status

jobs:
  update-badge:
    if: github.event.deployment_status.state == 'success'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Get branch and check commit
        id: get-branch
        uses: actions/github-script@v7
        with:
          script: |
            // Check if this was a badge update commit
            const { data: commit } = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.deployment.sha
            });

            if (commit.commit.message.includes('Update preview URL')) {
              console.log('Skipping badge update for badge commit');
              core.setOutput('skip', 'true');
              return;
            }

            // Get the branch for this commit
            const { data: refs } = await github.rest.git.listMatchingRefs({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/'
            });

            const branch = refs.find(ref => ref.object.sha === context.payload.deployment.sha);
            if (!branch) {
              core.setFailed('No branch found for this commit');
              return;
            }

            const branchName = branch.ref.replace('refs/heads/', '');
            core.setOutput('branch', branchName);
            core.setOutput('skip', 'false');

      - uses: actions/checkout@v4
        if: steps.get-branch.outputs.skip != 'true' && steps.get-branch.outputs.branch != ''
        with:
          ref: ${{ steps.get-branch.outputs.branch }}

      - name: Update Badge
        if: steps.get-branch.outputs.skip != 'true' && steps.get-branch.outputs.branch != ''
        uses: actions/github-script@v7
        env:
          NEW_URL: ${{ github.event.deployment_status.target_url }}
          BRANCH: ${{ steps.get-branch.outputs.branch }}
        with:
          script: |
            const fs = require('fs');

            try {
              const content = fs.readFileSync('README.md', 'utf8');
              const newBadge = `[![Vercel Preview](https://img.shields.io/github/deployments/gearsandcode/cartales-ai/Preview?label=vercel%20preview&logo=vercel&logoColor=white)](${process.env.NEW_URL})`;
              
              // Check if URL has changed
              const urlMatch = content.match(/\[!\[Vercel Preview\].*?\]\((.*?)\)/);
              const currentUrl = urlMatch ? urlMatch[1] : '';
              
              if (currentUrl === process.env.NEW_URL) {
                console.log('URL unchanged, skipping update');
                return;
              }
              
              // Update badge
              const newContent = content.replace(/\[!\[Vercel Preview\].*?\]\(.*?\)/, newBadge);
              
              const { data: file } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md',
                ref: process.env.BRANCH
              });
              
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: 'README.md',
                message: 'Update preview URL [skip ci]',
                content: Buffer.from(newContent).toString('base64'),
                sha: file.sha,
                branch: process.env.BRANCH,
                committer: {
                  name: 'github-actions[bot]',
                  email: '41898282+github-actions[bot]@users.noreply.github.com'
                }
              });
              
              console.log('Badge updated successfully');
            } catch (error) {
              core.setFailed(`Error updating badge: ${error.message}`);
            }
