name: Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: "${{ contains(github.event.head_commit.message, 'chore: version packages') }}"
    environment:
      name: production
      url: ${{ steps.verify_deployment.outputs.deploy_url }}
    steps:
      - name: üõí Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Deploy to Production
        uses: ./.github/actions/deploy
        with:
          environment: 'production'
          paas_url: ${{ secrets.PAAS_URL }}
          paas_uuid: ${{ secrets.PAAS_UUID }}
          paas_api_key: ${{ secrets.PAAS_API_KEY }}

      - name: Wait for and verify deployment
        id: verify_deployment
        run: |
          # Get application details for URL
          APP_DETAILS=$(curl -s -X GET \
            "${{ secrets.PAAS_URL }}/api/v1/applications/${{ secrets.PAAS_UUID }}" \
            -H "Authorization: Bearer ${{ secrets.PAAS_API_KEY }}")

          # Extract FQDN or preview URL
          FQDN=$(echo $APP_DETAILS | jq -r '.fqdn')
          PREVIEW_URL=$(echo $APP_DETAILS | jq -r '.previewUrl')

          if [[ "$FQDN" != "null" && ! -z "$FQDN" ]]; then
            DEPLOY_URL="https://$FQDN"
          elif [[ "$PREVIEW_URL" != "null" && ! -z "$PREVIEW_URL" ]]; then
            DEPLOY_URL="$PREVIEW_URL"
          else
            DEPLOY_URL="${{ secrets.PAAS_URL }}/applications/${{ secrets.PAAS_UUID }}"
          fi

          # Set URL as output
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

          # Basic availability check
          echo "Checking if application is responsive..."
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL" || echo "failed")

          if [[ "$HTTP_STATUS" == "failed" ]]; then
            echo "‚ö†Ô∏è Could not reach $DEPLOY_URL"
          elif [[ "$HTTP_STATUS" -ge 200 && "$HTTP_STATUS" -lt 400 ]]; then
            echo "‚úÖ Application is responding with HTTP $HTTP_STATUS"
          else
            echo "‚ö†Ô∏è Application returned HTTP status $HTTP_STATUS"
          fi

          # Always succeed - the GitHub Environment will show the URL regardless
          echo "Deployment URL: $DEPLOY_URL"
