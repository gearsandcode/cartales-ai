name: Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: "${{ contains(github.event.head_commit.message, 'chore: version packages') }}"
    environment:
      name: production
      url: ${{ steps.verify_deployment.outputs.deploy_url }}
    steps:
      - name: ðŸ›’ Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build

      - name: Deploy to Production
        uses: ./.github/actions/deploy
        with:
          environment: 'production'
          paas_url: ${{ secrets.PAAS_URL }}
          paas_uuid: ${{ secrets.PAAS_UUID }}
          paas_api_key: ${{ secrets.PAAS_API_KEY }}

      - name: Wait for and verify deployment
        id: verify_deployment
        run: |
          # Install jq for JSON parsing
          sudo apt-get install -y jq

          # Store our git SHA for comparison
          CURRENT_SHA="${{ github.sha }}"
          echo "Looking for deployment with commit SHA: $CURRENT_SHA"

          # Initialize variables
          MAX_ATTEMPTS=12
          ATTEMPT=0
          WAIT_SECONDS=10
          DEPLOY_FOUND=false

          while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
            ATTEMPT=$((ATTEMPT+1))
            echo "Checking deployment status (attempt $ATTEMPT/$MAX_ATTEMPTS)..."
            
            # Query Coolify API for deployments
            DEPLOYMENTS=$(curl -s -X GET \
              "${{ secrets.PAAS_URL }}/api/v1/deployments/applications/${{ secrets.PAAS_UUID }}" \
              -H "Authorization: Bearer ${{ secrets.PAAS_API_KEY }}")
            
            # Look for deployment with our commit SHA
            echo "Searching through deployments..."
            DEPLOYMENT=$(echo $DEPLOYMENTS | jq --arg sha "$CURRENT_SHA" '.[] | select(.git_commit_sha==$sha) | .' -c)
            
            if [ -n "$DEPLOYMENT" ]; then
              DEPLOY_FOUND=true
              DEPLOY_STATUS=$(echo $DEPLOYMENT | jq -r '.status')
              echo "Found our deployment with status: $DEPLOY_STATUS"
              
              # Check if deployment is complete or failed
              if [[ "$DEPLOY_STATUS" == "completed" || "$DEPLOY_STATUS" == "successful" || "$DEPLOY_STATUS" == "failed" ]]; then
                echo "Deployment reached final state: $DEPLOY_STATUS"
                break
              fi
              
              echo "Deployment still in progress, waiting..."
            else
              echo "Our deployment not found yet, waiting..."
            fi
            
            sleep $WAIT_SECONDS
          done

          # Get application details for URL
          APP_DETAILS=$(curl -s -X GET \
            "${{ secrets.PAAS_URL }}/api/v1/applications/${{ secrets.PAAS_UUID }}" \
            -H "Authorization: Bearer ${{ secrets.PAAS_API_KEY }}")

          # Extract FQDN or preview URL
          FQDN=$(echo $APP_DETAILS | jq -r '.fqdn')
          PREVIEW_URL=$(echo $APP_DETAILS | jq -r '.previewUrl')

          if [[ "$FQDN" != "null" && ! -z "$FQDN" ]]; then
            DEPLOY_URL="https://$FQDN"
          elif [[ "$PREVIEW_URL" != "null" && ! -z "$PREVIEW_URL" ]]; then
            DEPLOY_URL="$PREVIEW_URL"
          else
            DEPLOY_URL="${{ secrets.PAAS_URL }}/applications/${{ secrets.PAAS_UUID }}"
          fi

          # Set outputs
          echo "deploy_url=$DEPLOY_URL" >> $GITHUB_OUTPUT

          if [ "$DEPLOY_FOUND" = true ]; then
            echo "deploy_status=$DEPLOY_STATUS" >> $GITHUB_OUTPUT
          else
            echo "deploy_status=unknown" >> $GITHUB_OUTPUT
          fi
